///////////////7
flame display
////////////////

from machine import Pin, I2C
from umqtt.simple import MQTTClient
import time
import ssd1306

ssid = "No Paso Internet Ivana"
password = "123456789"
mqtt_broker = "192.168.8.200"
mqtt_topic = "utng/arg/flame"

flame_sensor_pin = 14  # Pin GPIO donde est치 conectado el sensor de llama

# Configuraci칩n del display OLED
i2c = I2C(0, scl=Pin(22), sda=Pin(21))
oled_width = 128
oled_height = 64
oled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c)

def connect_wifi():
    import network
    sta_if = network.WLAN(network.STA_IF)
    if not sta_if.isconnected():
        print("Conectando a WiFi...")
        sta_if.active(True)
        sta_if.connect(ssid, password)
        while not sta_if.isconnected():
            pass
    print("Conexi칩n WiFi exitosa")

def connect_mqtt():
    client = MQTTClient("esp32", mqtt_broker)
    client.connect()
    print("Conexi칩n MQTT exitosa")
    return client

def read_sensor():
    # Agrega la lectura del sensor de llama
    flame_detected = Pin(flame_sensor_pin, Pin.IN).value()
    return flame_detected

def publish_data(client, flame_detected):
    message = "Fuego cerca" if flame_detected else "No se detecta fuego"
    client.publish(mqtt_topic, message)
    display_message(message)

def display_message(message):
    oled.fill(0)  # Limpia la pantalla
    oled.text(message, 0, 0)  # Muestra el mensaje en la pantalla
    oled.show()  # Actualiza la pantalla con el mensaje

def main():
    connect_wifi()
    mqtt_client = connect_mqtt()

    while True:
        flame_detected = read_sensor()
        publish_data(mqtt_client, flame_detected)
        time.sleep(1)  # Publicar cada 10 segundos

if __name__ == "__main__":
    main()


////////////////7
json
////////////////7

[
    {
        "id": "82848384ebb9f97e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b8a71d0960b59889",
        "type": "mqtt in",
        "z": "82848384ebb9f97e",
        "name": "",
        "topic": "utng/arg/flame",
        "qos": "2",
        "datatype": "auto",
        "broker": "894951dafb5e412e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 160,
        "wires": [
            [
                "94ee133779a81dca"
            ]
        ]
    },
    {
        "id": "94ee133779a81dca",
        "type": "function",
        "z": "82848384ebb9f97e",
        "name": "",
        "func": "if (msg.payload === \"Fuego cerca\") {\n    var insertQuery = \"INSERT INTO fire_data2(flame_detected, detection_time) VALUES(true, NOW())\";\n    msg.query = insertQuery;\n    return msg;\n} else {\n    // No hace nada si no se detecta fuego\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 100,
        "wires": [
            [
                "fdff75bb09ca060d"
            ]
        ]
    },
    {
        "id": "fdff75bb09ca060d",
        "type": "postgresql",
        "z": "82848384ebb9f97e",
        "name": "",
        "query": "INSERT INTO fire_data2(flame_detected, message) VALUES('{{msg.payload.flame_detected}}', '{{msg.payload.message}}')\n",
        "postgreSQLConfig": "9277f660ec41eacb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 510,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "894951dafb5e412e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.8.200",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9277f660ec41eacb",
        "type": "postgreSQLConfig",
        "name": "equipo5",
        "host": "localhost",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "equipo5",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "12345",
        "passwordFieldType": "str"
    }
]