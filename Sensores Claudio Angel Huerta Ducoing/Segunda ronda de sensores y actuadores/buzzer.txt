//////////////////
buzzer
////////////////7

from machine import TouchPad, Pin, PWM
from umqtt.simple import MQTTClient
import time

# Configuración del sensor táctil
touch_pin = TouchPad(Pin(4))

# Configuración del buzzer (zumbador)
buzzer_pin = PWM(Pin(2))  # Pin PWM para el buzzer
buzzer_pin.freq(440)  # Frecuencia de la señal PWM (440 Hz para un tono de referencia)

# Configuración de la red Wi-Fi
ssid = "No Paso Internet Ivana"
password = "123456789"
mqtt_broker = "192.168.68.200"  # Cambiar a la dirección IP de tu broker MQTT
mqtt_topic = "utng/arg/buzzer"

# Función para conectar a Wi-Fi
def connect_wifi():
    import network
    sta_if = network.WLAN(network.STA_IF)
    if not sta_if.isconnected():
        print("Conectando a WiFi...")
        sta_if.active(True)
        sta_if.connect(ssid, password)
        while not sta_if.isconnected():
            pass
    print("Conexión WiFi exitosa")

# Función para conectar a MQTT
def connect_mqtt():
    client = MQTTClient("esp32", mqtt_broker)
    client.connect()
    print("Conexión MQTT exitosa")
    return client

# Función para leer el valor del sensor táctil
def leer_sensor():
    try:
        valor = touch_pin.read()
        return valor < 300
    except Exception as e:
        return False

# Función para publicar un mensaje MQTT cuando se toca el sensor
def publish_touch_event(client):
    client.publish(mqtt_topic, b"Tocado")
    print("Mensaje MQTT publicado: Tocado")

# Función para hacer que el buzzer emita sonido
def hacer_sonido():
    buzzer_pin.duty(512)  # 50% de ciclo de trabajo

# Función para detener el sonido del buzzer
def detener_sonido():
    buzzer_pin.duty(0)  # Apagar el buzzer

# Función principal
def main():
    connect_wifi()
    mqtt_client = connect_mqtt()

    sonido_activado = False  # Bandera para controlar el estado del sonido

    while True:
        tocado = leer_sensor()
        if tocado:
            if not sonido_activado:
                hacer_sonido()  # Activar el sonido si no está activado
                sonido_activado = True
                publish_touch_event(mqtt_client)
        else:
            if sonido_activado:
                detener_sonido()  # Detener el sonido si está activado
                sonido_activado = False
        time.sleep(1)  # Espera antes de volver a leer el sensor

if __name__ == "__main__":
    main()

////////////////////7
json
//////////////////

[
    {
        "id": "ef25fb37c0d62bdf",
        "type": "tab",
        "label": "Flujo 17",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3e6c37264a30332a",
        "type": "mqtt in",
        "z": "ef25fb37c0d62bdf",
        "name": "",
        "topic": "utng/arg/buzzer",
        "qos": "2",
        "datatype": "auto",
        "broker": "894951dafb5e412e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "4b459d282bc0de49",
                "cc378b4042b943eb"
            ]
        ]
    },
    {
        "id": "cc378b4042b943eb",
        "type": "postgresql",
        "z": "ef25fb37c0d62bdf",
        "name": "",
        "query": "INSERT INTO buzzer (valor) VALUES ('{{msg.payload}}');",
        "postgreSQLConfig": "9277f660ec41eacb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 650,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4b459d282bc0de49",
        "type": "debug",
        "z": "ef25fb37c0d62bdf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 260,
        "wires": []
    },
    {
        "id": "894951dafb5e412e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.68.200",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9277f660ec41eacb",
        "type": "postgreSQLConfig",
        "name": "equipo5",
        "host": "localhost",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "equipo5",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "12345",
        "passwordFieldType": "str"
    }
]