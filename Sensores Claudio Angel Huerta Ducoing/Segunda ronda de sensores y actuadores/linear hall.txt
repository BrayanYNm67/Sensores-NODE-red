////////////////////////
linear hall
/////////////////////////

from machine import Pin, ADC
from umqtt.simple import MQTTClient
import time
import network

# Configuración del pin conectado al sensor KY-024
pin_analogico = 34  # Cambiar al pin adecuado donde esté conectado el sensor

# Definir el umbral de detección (ajustar según sea necesario)
umbral_deteccion = 2000  # Este valor debe ser ajustado experimentalmente

# Configuración de red WiFi
ssid = "No Paso Internet Ivana"
password = "123456789"

# Configuración MQTT
mqtt_broker = "192.168.68.200"  # Dirección IP del broker MQTT
mqtt_topic = "utng/arg/lenear"

# Inicializar el pin ADC para lecturas analógicas
sensor_adc = ADC(Pin(pin_analogico))
sensor_adc.width(ADC.WIDTH_12BIT)  # Resolución de 12 bits
sensor_adc.atten(ADC.ATTN_11DB)     # Atenuación de 11 dB (rango de voltaje de 0-3.6V)

# Función para leer el valor del sensor y convertirlo a mV
def leer_sensor():
    valor = sensor_adc.read()
    return valor * 3600 / 4095  # Convertir lectura a milivoltios

# Función para conectar a WiFi
def connect_wifi():
    sta_if = network.WLAN(network.STA_IF)
    if not sta_if.isconnected():
        print("Conectando a WiFi...")
        sta_if.active(True)
        sta_if.connect(ssid, password)
        while not sta_if.isconnected():
            pass
    print("Conexión WiFi exitosa")

# Función para conectar a MQTT
def connect_mqtt():
    client = MQTTClient("esp32", mqtt_broker)
    client.connect()
    print("Conexión MQTT exitosa")
    return client

# Función para publicar el valor del sensor en MQTT si supera el umbral de detección
def publish_sensor_value(valor, client):
    if valor > umbral_deteccion:
        payload = "{:.2f}".format(valor)
        client.publish(mqtt_topic, payload)
        print("Valor del campo magnético publicado:", payload)

# Función principal para ejecutar el programa
def main():
    connect_wifi()
    mqtt_client = connect_mqtt()
    while True:
        valor_sensor = leer_sensor()
        publish_sensor_value(valor_sensor, mqtt_client)
        time.sleep(1)  # Esperar 1 segundo antes de la próxima lectura

if __name__ == "__main__":
    main()

/////////////////////////////
json
/////////////////////////////

[
    {
        "id": "af803b03e83ef010",
        "type": "tab",
        "label": "Flujo 11",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c9c2d497dd752299",
        "type": "mqtt in",
        "z": "af803b03e83ef010",
        "name": "",
        "topic": "utng/arg/lenear",
        "qos": "2",
        "datatype": "auto",
        "broker": "894951dafb5e412e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 160,
        "wires": [
            [
                "af01b5747166ff87",
                "2508bb30549cc416"
            ]
        ]
    },
    {
        "id": "2508bb30549cc416",
        "type": "postgresql",
        "z": "af803b03e83ef010",
        "name": "",
        "query": "INSERT INTO lenear (valor) VALUES ('{{msg.payload}}');",
        "postgreSQLConfig": "9277f660ec41eacb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 610,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "af01b5747166ff87",
        "type": "debug",
        "z": "af803b03e83ef010",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 280,
        "wires": []
    },
    {
        "id": "894951dafb5e412e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.68.200",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9277f660ec41eacb",
        "type": "postgreSQLConfig",
        "name": "equipo5",
        "host": "localhost",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "equipo5",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "12345",
        "passwordFieldType": "str"
    }
]